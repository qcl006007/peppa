(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{520:function(s,n,a){"use strict";a.r(n);var e=a(6),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("磨刀不误砍柴工 🕵🕵🕵")])]),s._v(" "),a("h2",{attrs:{id:"ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast"}},[s._v("#")]),s._v(" AST")]),s._v(" "),a("p",[s._v("AST 指的是 抽象语法树（Abstract Syntax Tree, AST）。或许你会疑问，这与我们平时的开发有什么关系么？\n在我们实际的开发中，JavaScript转译、css预处理器、elint、pretiier 等等这些模块我们不会在生产环境用到，但它们在我们的开发过程中充当着重要的角色，而所有的上述工具，都是建立在 AST 的基础上。")]),s._v(" "),a("h3",{attrs:{id:"ast-初识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast-初识"}},[s._v("#")]),s._v(" AST 初识")]),s._v(" "),a("p",[s._v("我们可以通过 (https://astexplorer.net/) 去实际观察，一段js代码在转换为AST树后是什么样子的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let add = (a,b) => a+b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("转换为AST后：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "type": "Program",\n  "start": 0,\n  "end": 27,\n  "body": [\n    {\n      "type": "VariableDeclaration",\n      "start": 0,\n      "end": 25,\n      "declarations": [\n        {\n          "type": "VariableDeclarator",\n          "start": 4,\n          "end": 25,\n          "id": {\n            "type": "Identifier",\n            "start": 4,\n            "end": 7,\n            "name": "add"\n          },\n          "init": {\n            "type": "ArrowFunctionExpression",\n            "start": 10,\n            "end": 25,\n            "id": null,\n            "expression": true,\n            "generator": false,\n            "async": false,\n            "params": [\n              {\n                "type": "Identifier",\n                "start": 11,\n                "end": 12,\n                "name": "a"\n              },\n              {\n                "type": "Identifier",\n                "start": 14,\n                "end": 15,\n                "name": "b"\n              }\n            ],\n            "body": {\n              "type": "BinaryExpression",\n              "start": 20,\n              "end": 25,\n              "left": {\n                "type": "Identifier",\n                "start": 20,\n                "end": 21,\n                "name": "a"\n              },\n              "operator": "+",\n              "right": {\n                "type": "Identifier",\n                "start": 24,\n                "end": 25,\n                "name": "b"\n              }\n            }\n          }\n        }\n      ],\n      "kind": "let"\n    }\n  ],\n  "sourceType": "module"\n}  \n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br")])]),a("p",[s._v("一个 AST 的根节点始终都是 Program；\n在根节点的下面，有一个变量声明，VariableDeclaration，其节点的name是add。\n这个add变量被初始化为箭头函数，含有两个参数，name分别为a和b。\n其函数体是一个BinaryExpression(二进制表达式)，一个标准的二进制表达式分为三部分：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("left(左边)：a")])]),s._v(" "),a("li",[a("p",[s._v("operator(运算符)：加号 +")])]),s._v(" "),a("li",[a("p",[s._v("right(右边)：b")])])]),s._v(" "),a("p",[s._v("其实AST本质上就是一组规则的JSON，操作AST也就是按照一定规则或者rules操作JSON里各个属性的值，从而实现代码优化，代码转译，代码检查等等目的。")]),s._v(" "),a("h3",{attrs:{id:"ast-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast-节点"}},[s._v("#")]),s._v(" AST 节点")]),s._v(" "),a("p",[s._v("AST节点具有以下的属性：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/ast_node.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"babel-工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-工作原理"}},[s._v("#")]),s._v(" Babel 工作原理")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/ast_01.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"api-总览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-总览"}},[s._v("#")]),s._v(" API 总览")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 三剑客\nconst parser = require('@babel/parser').parse;\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\n\n// 配套包\nconst types = require('@babel/types');\n\n// 模板包\nconst template = require('@babel/template').default;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);