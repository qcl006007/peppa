(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{521:function(t,s,e){"use strict";e.r(s);var _=e(6),i=Object(_.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("学习笔记，大图警告 🚫🚫🚫\n")])]),t._v(" "),e("p",[t._v("清晨早起，先来几个简单的知识点回顾一下：")]),t._v(" "),e("h2",{attrs:{id:"http-常见知识点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-常见知识点"}},[t._v("#")]),t._v(" Http 常见知识点")]),t._v(" "),e("h3",{attrs:{id:"http-定义及优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-定义及优缺点"}},[t._v("#")]),t._v(" Http 定义及优缺点")]),t._v(" "),e("p",[t._v("HTTP(超文本传输协议)  是 客户端 与 服务端 之间信息交流的 桥梁。\n在信息交流之前必须要做的就是 客户端通过连接TCP/IP协议 80 端口 ，以便 服务端侦听HTTP请求。3.HTTP 是 一种通用的 ， 无状态的应用层协议，基于标准客户机/服务器模型。")]),t._v(" "),e("p",[t._v("优缺点：")]),t._v(" "),e("h3",{attrs:{id:"http-请求状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-请求状态码"}},[t._v("#")]),t._v(" Http 请求状态码")]),t._v(" "),e("p",[t._v("100, 101, 200, 201, 301, 302, 400, 401, 403, 500, 502, 503;")]),t._v(" "),e("h3",{attrs:{id:"http-请求头字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-请求头字段"}},[t._v("#")]),t._v(" Http 请求头字段")]),t._v(" "),e("p",[t._v("Request: Accept, Accpet-Charset, Accept-Encoding, Accept-Encoding, If-Modified-Since, User-Agent, Referer, Origin,")]),t._v(" "),e("h3",{attrs:{id:"http-响应头字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-响应头字段"}},[t._v("#")]),t._v(" Http 响应头字段")]),t._v(" "),e("p",[t._v("Respone: Date, Content-Type, Content-Encoding, Cache-Control, Etag, Last-Modified,")]),t._v(" "),e("h3",{attrs:{id:"http-常用请求方法-get-与-post-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-常用请求方法-get-与-post-的区别"}},[t._v("#")]),t._v(" Http 常用请求方法，Get 与 Post 的区别")]),t._v(" "),e("p",[t._v("根据 HTTP 标准，HTTP 请求可以使用多种请求方法。 HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。 HTTP/1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。")]),t._v(" "),e("p",[t._v("Get 与 Post的区别：")]),t._v(" "),e("p",[t._v("数据类型，编码类型，缓存，请求参数可见，长度限制")]),t._v(" "),e("h3",{attrs:{id:"cookie-与-session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-与-session"}},[t._v("#")]),t._v(" Cookie 与 Session")]),t._v(" "),e("p",[t._v("介绍 Cookie 和 Session 的作用及它们之间的区别")]),t._v(" "),e("ol",[e("li",[t._v("Cookie简单介绍")])]),t._v(" "),e("p",[t._v("Cookie是存储在用户本地计算机上，用于保存一些用户操作的历史信息，当用户再次访问我们的服务器的时候，浏览器通过HTTP协议，将他们本地的Cookie内容也发到咱们服务器上，从而完成验证。")]),t._v(" "),e("ul",[e("li",[t._v("Cookie 是存储在浏览器客户的一小片数据；")]),t._v(" "),e("li",[t._v("Cookie 可以同时被前台与后台操作；")]),t._v(" "),e("li",[t._v("Cookie 可以跨页面存取；")]),t._v(" "),e("li",[t._v("Cookie 是不可以跨服务器访问的；")]),t._v(" "),e("li",[t._v("Cookie 有限制； 每个浏览器存储的个数不能超过300个，每个服务器不能超过20个，数据量不能超过4K；")]),t._v(" "),e("li",[t._v("Cookie 是有生命周期的，默认与浏览器相同，如果进程退出，cookie会被销毁")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Session")])]),t._v(" "),e("p",[t._v("Session 存储在我们的服务器上，就是在我们的服务器上保存用户的操作信息。")]),t._v(" "),e("p",[t._v("当用户访问我们的网站时，我们的服务器会成一个 SessionID，然后把 SessionID 存储起来，再把这个 SessionID发给我们的用户，用户再次访问我们的服务器的时候，拿着这个 SessionID就能验证了，当这个ID能与我们服务器上存储的ID对应起来时，我们就可以认为是自己人。")]),t._v(" "),e("ul",[e("li",[t._v("seesion 数据存储在服务器端；")]),t._v(" "),e("li",[t._v("每一个会话分配一个单独的 session_id;")]),t._v(" "),e("li",[t._v("该 session_id 通过 cookie 传送到前台，默认的 session_id 名称是 PHPSESSIONID;")]),t._v(" "),e("li",[t._v("前台只能看到 Session 的 ID，而不能修改 Session 值;")]),t._v(" "),e("li",[t._v("使用 Session之前需要先开启会话;")]),t._v(" "),e("li",[t._v("Session存储在 Session数组 $_SESSION;")]),t._v(" "),e("li",[t._v("Session存储方式比较安全，但是如果 Session数量过多，会导致服务器性能下降;")])]),t._v(" "),e("p",[t._v("区别： 存储位置，存储大小，安全性，存储时间")]),t._v(" "),e("p",[t._v("结合使用：")]),t._v(" "),e("h2",{attrs:{id:"体系梳理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#体系梳理"}},[t._v("#")]),t._v(" 体系梳理")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/http_01.jpg",alt:"思维导图"}})]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/4cwM_EI3VLTrgGtRpJd9mA",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速梳理你的HTTP体系"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=i.exports}}]);